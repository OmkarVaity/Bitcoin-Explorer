name: CI/CD Pipeline for Bitcoin Explorer

on:
  push:
    branches:
      - master  
  pull_request:
    branches:
      - master 

concurrency:
  group: bitcoin-explorer-deployment
  cancel-in-progress: true

env:
  VERSION: v${{ github.run_number }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/btc-explorer-backend:${{ env.VERSION }} -f ./backend/Dockerfile ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/btc-explorer-backend:${{ env.VERSION }}

      - name: Build and push frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/btc-explorer-frontend:${{ env.VERSION }} -f ./frontend/Dockerfile ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/btc-explorer-frontend:${{ env.VERSION }}

      - name: Build and push ingestion Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/btc-explorer-ingestion:${{ env.VERSION }} -f ./ingestion/Dockerfile ./ingestion
          docker push ${{ secrets.DOCKER_USERNAME }}/btc-explorer-ingestion:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Create Target Directory on Server
        run: |
          sshpass -p "${{ secrets.DEPLOY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_SERVER }} "mkdir -p /home/${{ secrets.DEPLOY_USER }}"

      - name: Copy Docker Compose file to Server
        run: |
          sshpass -p "${{ secrets.DEPLOY_PASSWORD }}" scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_SERVER }}:/home/${{ secrets.DEPLOY_USER }}/docker-compose.yml

      - name: Copy Ingestion Directory to Server
        run: |
          sshpass -p "${{ secrets.DEPLOY_PASSWORD }}" scp -o StrictHostKeyChecking=no -r ingestion ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_SERVER }}:/home/${{ secrets.DEPLOY_USER }}/ingestion

      - name: SSH Deploy Using Docker Compose
        env:
          VERSION: ${{ env.VERSION }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          sshpass -p "${{ secrets.DEPLOY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_SERVER }} <<EOF
            cd /home/${{ secrets.DEPLOY_USER }}
            sed -i "s/omkarvaity\/btc-explorer-backend:.*/omkarvaity\/btc-explorer-backend:\${VERSION}/g" docker-compose.yml
            sed -i "s/omkarvaity\/btc-explorer-frontend:.*/omkarvaity\/btc-explorer-frontend:\${VERSION}/g" docker-compose.yml
            sed -i "s/omkarvaity\/btc-explorer-ingestion:.*/omkarvaity\/btc-explorer-ingestion:\${VERSION}/g" docker-compose.yml

            # Export environment variables
            export DB_USER=${DB_USER}
            export DB_PASSWORD=${DB_PASSWORD}
            export DB_NAME=${DB_NAME}
            export DB_PORT=${DB_PORT}

            # Pull the latest images
            docker-compose -f docker-compose.yml pull

            # Restart all services with Docker Compose
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d
          EOF

      - name: Verify Deployment
        run: |
          sshpass -p "${{ secrets.DEPLOY_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_SERVER }} <<EOF
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
          EOF
